{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Curso de Dart &amp; Flutter","text":"<p>Sum\u00e9rgete en el maravilloso mundo de Flutter, el marco de trabajo de c\u00f3digo abierto de Google. Aprende a crear interfaces de usuario hermosas y altamente personalizables para Android e iOS desde una \u00fanica base de c\u00f3digo.</p>"},{"location":"#contenido","title":"Contenido","text":"<ol> <li>Configuraci\u00f3n del Entorno de Desarrollo</li> <li>Instalaci\u00f3n de Dart SDK.</li> <li>Configuraci\u00f3n del entorno de desarrollo (IDE).</li> <li>Sintaxis B\u00e1sica de Dart</li> <li>Variables y tipos de datos.</li> <li>Estructuras de control: if, if-else.</li> <li>Bucles: for, while.</li> <li>Listas, Mapas y Conjuntos<ol> <li>M\u00e9todos y operaciones comunes de colecciones.</li> </ol> </li> <li>Funciones en Dart</li> <li>Declaraci\u00f3n de funciones</li> <li>Par\u00e1metros y valores de retorno</li> <li>Funciones an\u00f3nimas y funciones de flecha</li> <li>Conceptos B\u00e1sicos de POO<ol> <li>Clases y objetos.</li> <li>Herencia</li> <li>Polimorfismo</li> <li>Uso de modificadores de acceso (public, private, protected)</li> <li>Paquetes y bibliotecas en Dart</li> <li>Manejo de Excepciones</li> <li>Try, catch, finally.</li> </ol> </li> <li>Iteradores y Streams<ol> <li>Uso de forEach, map, filter, etc.</li> <li>Streams y manejo as\u00edncrono.</li> </ol> </li> <li>Acceso a Datos Remotos<ol> <li>Uso de APIs REST con Dart.</li> <li>Manejo de respuestas as\u00edncronas.</li> </ol> </li> <li>Introducci\u00f3n a Flutter<ol> <li>\u00bfQu\u00e9 es Flutter?</li> <li>Ventajas de Flutter</li> <li>Estructura de un proyecto Flutter</li> </ol> </li> <li>Widgets en Flutter<ol> <li>Concepto de widget</li> <li>Tipos de widgets (StatelessWidget, StatefulWidget)</li> <li>Creaci\u00f3n y personalizaci\u00f3n de widgets</li> </ol> </li> <li>Navegaci\u00f3n y rutas en Flutter<ol> <li>Navegaci\u00f3n entre pantallas</li> <li>Paso de datos entre pantallas</li> </ol> </li> <li>Gesti\u00f3n de estado en Flutter<ol> <li>Manejo del estado local</li> <li>Manejo del estado global (Provider, Bloc)</li> </ol> </li> <li>Acceso a servicios y APIs<ol> <li>Consumo de APIs REST en Flutter</li> <li>Uso de paquetes y dependencias externas</li> </ol> </li> <li>Persistencia de datos<ol> <li>Almacenamiento local en Flutter</li> <li>Uso de bases de datos (SQLite, Firebase)</li> </ol> </li> <li>Proyecto Final</li> <li>Despliegue de la aplicaci\u00f3n</li> </ol>"},{"location":"dart/","title":"Instalaci\u00f3n y Configuraci\u00f3n de Dart y Flutter","text":"<p>La manera mas sencilla de instalar Dart si sera usado en un futuro con Flutter, es desde su sitio oficial.</p>"},{"location":"dart/#configuracion-en-windows","title":"Configuraci\u00f3n en Windows","text":""},{"location":"dart/#descargar-flutter","title":"Descargar Flutter","text":"<ol> <li>Descargar el archivo <code>zip</code> de la pagina oficial Descarga</li> </ol> <ol> <li>Una vez descargado, descomprimirlo y la carpeta generada, debe ser colocada en algun directorio seguro. Ejemplo</li> <li><code>%USERPROFILE%\\flutter</code></li> <li><code>D:\\dev\\flutter</code></li> </ol> <p>Warning</p> <p>No guardarlo en <code>C:\\Program Files\\</code> porque requiere privilegios de administrador, ademas que no tiene caso.</p>"},{"location":"dart/#configuracion-del-path","title":"Configuraci\u00f3n del <code>PATH</code>","text":"<p>Comprobar el path con dart y flutter, correr flutter doctor y ya, continuar en la seccion de flutter con android estudio</p> <p>TODO: Verificar en la consola que todo funcione bien</p>"},{"location":"dart/#editor-de-codigo","title":"Editor de c\u00f3digo","text":""},{"location":"dart/#descargando-e-instalando-visual-studio-code","title":"Descargando e instalando Visual Studio Code","text":"<p>Para el uso de Dart (Con Flutter se vera despu\u00e9s), vamos a utilizar Visual Studio Code.</p> <p>Note</p> <p>Descargar de su sitio oficial Aqu\u00ed</p> <p>TODO: Agregar la imagen del sitio</p> <p>TODO: Agregar la secuencia de la instalacion</p>"},{"location":"dart/#agregando-plugins-a-vs-code","title":"Agregando plugins a VS Code","text":"<ol> <li>Nos debemos ir a la secci\u00f3n de instalaci\u00f3n de <code>Extensiones</code> de VS Code</li> <li>En el buscador escribimos <code>dart</code>, para encontrar el plugin oficial</li> <li>Damos en el bot\u00f3n de instalar, esperamos y quedara instalado</li> </ol> <p>Verificamos que este instalado correctamente como se ve en la imagen</p> <p></p> <p>Realizando todo esto, nuestro entorno estar\u00e1 listo para comenzar a programar con dart.</p> <p>Informaci\u00f3n del sitio oficial</p>"},{"location":"dart/01.sintaxis/","title":"Sintaxis b\u00e1sica de Dart","text":""},{"location":"dart/01.sintaxis/#hello-word-con-dart","title":"Hello Word con Dart","text":"<ol> <li>Crear un archivo nuevo, darle el nombre de <code>main.dart</code></li> <li>Escribir en el :</li> </ol> main.dart<pre><code>// Nuestro primer programa\n\nvoid main(){\n    print(\"Hello Word\");\n}\n</code></pre> <p>Para probar nuestro primer programa, abrimos la terminal</p> <pre><code>dart main.dart\n</code></pre> <p>Obtenemos en la salida</p> <pre><code>    Hello Word\n</code></pre>"},{"location":"dart/01.sintaxis/#comentarios","title":"Comentarios","text":"<p>Los comentarios nos ayudan a documentar o darnos pistas dentro del c\u00f3digo. Todo comentario sera ignorado por el compilador, no importa que el comentario contenga lineas de c\u00f3digo validas y correctas, el compilador simplemente lo pasara por alto.</p> <p>Hay dos tipos bloque de comentario</p> <ol> <li>Una linea</li> <li>Multi linea</li> </ol>"},{"location":"dart/01.sintaxis/#comentario-de-una-linea","title":"Comentario de una linea","text":"<p>Para agregar comentario en un linea del archivo se inicia con doble diagonal (<code>slash</code>) (<code>//</code>). Cuando se coloca doble slash, a partir de ahi todo lo que esta delante se convierte en comentario y el compilador de ignora</p> <pre><code>// Esto es un comentario\n// Otro comentario de una linea\n</code></pre>"},{"location":"dart/01.sintaxis/#bloque-de-comentario-o-multi-linea","title":"Bloque de comentario o multi linea","text":"<p>Este tipo de bloque de comentario nos sirve para envolver varias lineas de c\u00f3digo, sin la necesidad de estar colocando en cada linea <code>doble slash</code>. El bloque de comentario debe iniciar con diagonal junto con un asterisco (<code>/*</code>) y cerrando el bloque con asterisco y diagonal (<code>*/</code>)</p> <pre><code>/* inicia el bloque de comentario\n    Bloque de comentario\n    Continua siendo comentario\n    ...\n\ntermina el bloque de comentario */\n</code></pre>"},{"location":"dart/01.sintaxis/#variables-y-tipos-de-datos","title":"Variables y tipos de datos","text":"<p>Note</p> <p>Toda sentencia termina con punto y come (<code>;</code>).</p>"},{"location":"dart/01.sintaxis/#tipos-de-datos-en-dart","title":"Tipos de datos en Dart","text":"<p>Dart soporta los siguientes tipos de datos, aqu\u00ed solo usaremos los mas importantes y b\u00e1sicos.</p> <ul> <li>Numbers (int, double)</li> <li>Strings (String)</li> <li>Booleans (bool)</li> <li>Lists (List, also known as arrays)</li> <li>Sets (Set)</li> <li>Maps (Map)</li> <li>Object: The superclass of all Dart classes except Null.</li> <li>Enum: The superclass of all enums.</li> <li>Future and Stream: Used in asynchrony support.</li> <li>Iterable: Used in for-in loops and in synchronous generator functions.</li> <li>The value null (Null)</li> <li>dynamic (din\u00e1mico, cualquiera de los anteriores)</li> </ul>"},{"location":"dart/01.sintaxis/#numbers-numeros","title":"Numbers (N\u00fameros)","text":""},{"location":"dart/01.sintaxis/#int-entero","title":"int (entero)","text":"<p>El valor int (entero) no tan largo que 64 btis, dependiendo de la plataforma. En plataformas nativa el valor va desde -2<sup>63</sup> hasta 2<sup>63</sup> -1, en la web es de el valor va desde -2<sup>53</sup> hasta 2<sup>53</sup> -1</p> <pre><code>int numero1 = 23;\nint numero2 = 34234;\nint numero3 = -6;\n</code></pre>"},{"location":"dart/01.sintaxis/#doble-doble-o-real","title":"doble (Doble o Real)","text":"<p>Precision de 64 bits con punto flotante, como marca la especificaci\u00f3n del est\u00e1ndar IEEE 754</p> <pre><code>double numero1 = 0.4;\ndouble numero2 = -23.23;\ndouble numero3 = 546.34;\n</code></pre>"},{"location":"dart/01.sintaxis/#strings","title":"Strings","text":"<p>Un <code>String</code> en Dart es una secuencia de c\u00f3digos UTF-16. Se puede utilizar comillas simples (<code>''</code>) o comillas dobles (<code>\"\"</code>), para envolver la cadena de caracteres.</p>"},{"location":"dart/01.sintaxis/#cadena-en-una-linea","title":"Cadena en una linea","text":"<pre><code>String s1 = 'Single quotes work well for string literals.';\nString s2 = \"Double quotes work just as well.\";\nString s3 = 'It\\'s easy to escape the string delimiter.';\nString s4 = \"It's even easier to use the other delimiter.\";\n</code></pre>"},{"location":"dart/01.sintaxis/#cadena-en-multi-linea","title":"Cadena en multi linea","text":"<pre><code>String s1 = '''\nYou can create\nmulti-line strings like this one.\n''';\n\nString s2 = \"\"\"This is also a\nmulti-line string.\"\"\";\n</code></pre>"},{"location":"dart/01.sintaxis/#declaracion-de-variables","title":"Declaraci\u00f3n de variables","text":"<p>La forma de declarar variables, tiene la siguiente estructura:</p> <pre><code>tipo_de_dato nombre_de_variable = valor ;\n</code></pre> <p> </p>"},{"location":"dart/01.sintaxis/#booleans","title":"Booleans","text":"<p>La representaci\u00f3n de un valor booleano, tiene el nombre de <code>bool</code> en Dart. Solo puede contener dos tipos de valores <code>false</code> y <code>true</code>.</p> <pre><code>bool isAlive = true;\nbool isEmpty = false;\nbool isLogin = false;\n</code></pre>"},{"location":"dart/01.sintaxis/#funcion-print","title":"Funci\u00f3n <code>print()</code>","text":"<p>La funci\u00f3n print nos sirve para enviar mensajes o informaci\u00f3n a la salida est\u00e1ndar del sistema (stdout). Se coloca la palabra <code>print</code> y entre sus par\u00e9ntesis todos los argumentos que queramos colocar, puede ser cualquier tipo de dato.</p> <pre><code>print(\"Hola mundo\");\n\nprint(4 + 3);\n\nprint(variable);\n</code></pre> <p> </p>"},{"location":"dart/01.sintaxis/#estructura-base-de-un-programa-dart","title":"Estructura base de un programa Dart","text":"<p>La estructura de todo archivo Dart que queramos ejecutar debe contener forzosamente la funci\u00f3n <code>main</code>. Por el momento asi estaremos trabajando</p> <p>Note</p> <p>Todo el c\u00f3digo que escribamos debe estar dentro de la funci\u00f3n <code>main()</code>, SIEMPRE. En un futuro aprenderemos qu\u00e9 y c\u00f3mo se debe y puede escribir fuera de ella.</p> <pre><code>//funci\u00f3n main\n\nvoid main(){ //inicia la funci\u00f3n\n    //contenido del programa\n    print(\"Hola mundo\");\n\n}//termina la funci\u00f3n main\n</code></pre> <p> </p>"},{"location":"dart/01.sintaxis/#ejercicios","title":"Ejercicios","text":"<ol> <li>Declarar 5 variables, que sean de diferente tipo, es decir, entero, flotante, booleano y String</li> <li>Declarar 3 variables de tipo entero, y despu\u00e9s mandarlos a imprimir</li> <li>Declarar 3 variables de tipo flotante, despu\u00e9s mandarlos a imprimir</li> <li>Declarar 3 variables de tipo String; el mensaje puede ser cual sea, despu\u00e9s mandarlos a imprimir</li> </ol> <p>M\u00e1s informaci\u00f3n en: https://dart.dev/language/built-in-types</p>"},{"location":"dart/02.operadores/","title":"Operadores b\u00e1sicos","text":"<p>Existen diversos tipos de operadores, para diferentes aplicaciones.</p> <ul> <li>Operadores Aritm\u00e9ticos</li> <li>Operadores de relaci\u00f3n e igualdad</li> <li>Operadores l\u00f3gicos</li> <li>Operadores de prueba de tipos</li> <li>Operadores de asignaci\u00f3n</li> </ul>"},{"location":"dart/02.operadores/#operadores-aritmeticos","title":"Operadores Aritm\u00e9ticos","text":"<p>Las operaciones aritm\u00e9ticas que tiene el lenguaje <code>dart</code> son las siguientes:</p> Operador Significado <code>+</code> Suma <code>-</code> Resta <code>-expr</code> Negaci\u00f3n <code>*</code> Multiplicaci\u00f3n <code>/</code> Division <code>~/</code> Division, resultado en entero <code>%</code> Residuo o m\u00f3dulo <code>=</code> Asignaci\u00f3n <p>Son los \u00fanicos operadores que existen en este lenguaje (puede ser que el futuro agreguen alguno)</p>"},{"location":"dart/02.operadores/#operadores-de-relacion-e-igualdad","title":"Operadores de relaci\u00f3n e igualdad","text":"<p>Estos operadores no ayudan a comparar variables, son los siguientes</p> S\u00edmbolo Significado <code>==</code> Igual que <code>!=</code> Diferente de <code>&gt;</code> Mayor que <code>&lt;</code> Menor que <code>&gt;=</code> Mayor o igual que <code>&lt;=</code> Menor o igual que <p>Ejecuta los siguientes ejemplos:</p> <pre><code>print(2 == 2);\nprint(2 != 3);\nprint(3 &gt; 2);\nprint(2 &lt; 3);\nprint(3 &gt;= 3);\nprint(2 &lt;= 3);\n</code></pre> <p>Al ser una comparaci\u00f3n, los \u00fanicos valores posibles que se pueden obtener son booleanos, es decir, verdadero o falso, dependiendo de lo que se esta comparando.</p> <p>Ejemplos de aplicaci\u00f3n de los operadores aritm\u00e9ticos:</p> <pre><code>print(2 + 3);\nprint(2 - 3);\nprint(2 * 3);\nprint(5 / 2);\nprint(5 ~/2);\nprint(5 % 2);\n\nint resultado = 5 ~/ 2;\nprint('5/2 = ${resultado}');\n</code></pre>"},{"location":"dart/02.operadores/#operador-de-pre-y-post-incrementodecremento","title":"Operador de pre y post incremento/decremento","text":"<p>Contamos con 2 operadores y prefijo o sufijo. Estos son una contraccion de una operacion de incremento o decremento, el cual puede ser puede tambien realizar con una operacion basica pero este seria un <code>shorthand</code>, es decir, una version corta o abrevida de la operacion.</p> Operador Nombre Equivalencia <code>++var</code> Pre-incremento <code>var = var + 1</code> <code>var++</code> Post-incremento <code>var = var + 1</code> <code>--var</code> Pre-decremento <code>var = var - 1</code> <code>var--</code> Post-decremento <code>var = var - 1</code> <pre><code>void main() {\nint var1 = 3;\nint var2 = 7;\n\nprint(var1++); //incrementa DESPU\u00c9S de la ejecuci\u00f3n del print\nprint(++var1); //incrementa ANTES de la ejecuci\u00f3n del print\nprint(var2--); //decrementa DESPU\u00c9S de la ejecuci\u00f3n del print\nprint(--var2); //decrementa ANTES de la ejecuci\u00f3n del print\n}\n</code></pre> <p>Salida:</p> <p>3  5  7  5</p>"},{"location":"dart/02.operadores/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<p>Los operadores l\u00f3gicos solo pueden ser aplicados con el tipo de dato <code>bool</code>, por lo tanto debe venir de una comparaci\u00f3n o de un valor booleano.</p> Operador S\u00edmbolo <code>&amp;&amp;</code> operador AND (Y) <code>||</code> operador OR (O)"},{"location":"dart/02.operadores/#tablas-de-operadores-logicos","title":"Tablas de operadores l\u00f3gicos","text":""},{"location":"dart/02.operadores/#and","title":"AND","text":"Valor 1 Valor 2 Resultado <code>false</code> <code>false</code> <code>false</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>false</code> <code>false</code> <code>true</code> <code>true</code> <code>true</code>"},{"location":"dart/02.operadores/#or","title":"OR","text":"Valor 1 Valor 2 Resultado <code>false</code> <code>false</code> <code>false</code> <code>false</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <pre><code>main() {\nbool valor1 = true;\nbool valor2 = false;\n\nprint(\"${valor1 &amp;&amp; valor2}\");\nprint(\"${valor2 || valor1}\");\n}\n</code></pre> <p>Para una aplicaci\u00f3n mayor ir a secci\u00f3n de decisiones</p>"},{"location":"dart/02.operadores/#jerarquia-de-operadores","title":"Jerarqu\u00eda de operadores","text":"Orden Nombre Operadores 1 post unitario <code>expr++</code> <code>expr--</code> <code>( )</code> <code>[]</code> <code>?[ ]</code> <code>.</code> <code>?.</code> <code>!</code> 2 pre unitario <code>-expr</code> <code>!expr</code> <code>~expr</code> <code>++expr</code> <code>--expr</code> <code>await expr</code> 3 multiplicativos <code>*</code> <code>/</code> <code>%``~/</code> 4 aditivos <code>+</code> <code>-</code> 5 de relaci\u00f3n o test <code>&gt;=``&gt;``&lt;=``&lt;``as``is``is!</code> 6 igualdad <code>==</code> <code>!=</code> 7 l\u00f3gico AND <code>&amp;&amp;</code> 8 l\u00f3gico OR <code>||</code> 9 if null <code>??</code> 10 operador ternario <code>expr1 ? expr2 : expr3</code> 11 cascada <code>..</code> <code>?..</code> 12 asignaci\u00f3n <code>=</code> <code>*=</code> <code>/=</code> <code>+=</code> <code>-=</code> <code>&amp;=</code> <code>^=</code>"},{"location":"dart/02.operadores/#ejercicios","title":"Ejercicios","text":""},{"location":"dart/02.operadores/#operadores-aritmeticos_1","title":"Operadores aritm\u00e9ticos","text":"<ol> <li>Realizar la suma de 2 n\u00fameros</li> <li>Realizar la resta de 3 n\u00fameros</li> <li>Realizar la suma de 3 n\u00fameros, despu\u00e9s ese resultado multiplicarlo por 2, a este resultado dividirlo entre 3, e imprimir el resultado.</li> </ol>"},{"location":"dart/02.operadores/#operadores-de-relacion-e-igualdad_1","title":"Operadores de relaci\u00f3n e igualdad","text":"<ol> <li>Comparar si 5 es igual a 9, he imprime el resultado</li> <li>Comparar si 5 es diferente de 9, he imprime el resultado</li> <li>Comparar si 35 es menor que 100, he imprime el resultado</li> </ol> <p>Mas informaci\u00f3n en la documentaci\u00f3n oficial</p>"},{"location":"dart/03.strings/","title":"Cadenas de texto (String)","text":"<p>Los <code>strings</code> o cadena de caracteres nos sirven para guardar texto, este texto pueden ser n\u00fameros, letras, s\u00edmbolos, emojis, etc.</p> <p>Formas de declarar strings</p> <pre><code>String s1 = 'Single quotes work well for string literals.';\nString s2 = \"Double quotes work just as well.\";\nString s3 = 'It\\'s easy to escape the string delimiter.';\nString s4 = \"It's even easier to use the other delimiter.\";\nString s5 = \"\"\"Este texto es multilinea, que a su ves saldr\u00e1 de esta manera\ncon los saltos de lineas que se agreguen\n\"\"\";\nString s6 = '''Este texto es multilinea, que a su ves saldr\u00e1 de esta manera\nse puede usar comillas simples\n''';\n</code></pre>"},{"location":"dart/03.strings/#concatenacion","title":"Concatenaci\u00f3n","text":"<p>La concatenaci\u00f3n es la union o combinaci\u00f3n de varios strings, esto se puede realizar de dos maneras (hay mas, pero estas son las usuales)</p> S\u00edmbolo Aplicaci\u00f3n Nota <code>+</code> <code>var1 + var2</code> <code>$</code> <code>\"$var1 $var2\"</code> El signo de peso debe estar dentro de la doble comillas o comillas simples <code>$</code> <code>\"${var1 + $var2}\"</code> El signo de peso debe estar dentro de la doble comillas o comillas simples; pero cuando se quiere hacer una operaci\u00f3n extra se debe colocar llaves <pre><code>main() {\n  String mensaje1 = \"Hola \" + \"mundo\";\n\n  String palabra = \"Dart\";\n  String mensaje2 = \"$mensaje1, soy Programador $palabra \";\n\n  String mensaje3 = \"${mensaje1 + mensaje2}\";\n  print(mensaje1);\n  print(mensaje2);\n  print(mensaje3);\n}\n</code></pre>"},{"location":"dart/03.strings/#conversion-a-string","title":"Conversion a String","text":"<p>Cuando estamos realizando operaciones matem\u00e1ticas, necesitamos pasar este tipo de dato a string, o cualquier otro tipo. Para esto cada objeto tiene sus m\u00e9todos para hacer esa conversion.</p> <p>Pr\u00e1cticamente todos los objetos tienen su m\u00e9todo para convertir a String.</p> <pre><code>void main() {\n  int valor1 = 43;\n  double valor2 = 34.23;\n  bool booleano = true;\n\n  String valorEntero = valor1.toString();\n  String valorDouble = valor2.toString();\n  String valorBool = booleano.toString();\n\n  String mensaje1 = \"El valor entero es \" + valorEntero;\n  String mensaje2 = \"El valor double es \" + valorDouble;\n  String mensaje3 = \"El valor bool es \" + valorBool;\n\n  print(mensaje1);\n  print(mensaje2);\n  print(mensaje3);\n}\n</code></pre>"},{"location":"dart/03.strings/#secuencias-de-escape","title":"Secuencias de escape","text":""},{"location":"dart/03.strings/#ejercicios","title":"Ejercicios","text":"<ol> <li>Declarar una variable con un mensaje y mandarlo a la pantalla</li> <li>Declarar 2 variables, cada una con un texto diferente para concatenarlas e imprimir la frase completa</li> <li>Mandar un string en la funci\u00f3n <code>print</code>, pero dentro de este string realizar la concatenaci\u00f3n de 2 variables string</li> </ol>"},{"location":"dart/04.entrada_de_datos/","title":"Entrada de datos (stdin)","text":"<p>Para realizar aplicaciones sencillas o de terminal necesitamos en muchas ocasiones recibir par\u00e1metros del usuario, esto debe ser solicitado al usuario para que con base a esa informaci\u00f3n nuestro programa actu\u00e9. Esto lo podemos realizar con la funci\u00f3n <code>readLineSync</code>, que viene en objeto <code>stdin</code>, como el mismo nombre lo indica es la entrada por terminal o consola, como se muestra en el ejemplo siguiente:</p> <pre><code>// importing dart:io file y convert\nimport 'dart:convert';\nimport 'dart:io';\n\nvoid main(){\n print(\"Enter your name?\");\n // Se lee desde la terminal el texto introducido\n String name = stdin.readLineSync(encoding: utf8)!;// se colocar ! para forzar el ingreso \"seguro\" de datos\n\n // Printing the name\n print(\"Hola, $name . Eres todo un programador dart!\");\n}\n</code></pre> <p>Le indicamos la codificaci\u00f3n en la que debe interpretar lo que vayamos a escribir, esto es por los s\u00edmbolos especiales que tiene el idioma espanol, como lo son por ejemplo la <code>\u00f1</code>.</p>"},{"location":"dart/04.entrada_de_datos/#ejemplos","title":"Ejemplos","text":"<ol> <li>Suma de 2 n\u00fameros en memoria e imprimir el resultado (Datos ingresados por el usuario)</li> <li>Multiplicaci\u00f3n de 2 n\u00fameros en memoria e imprimir el resultado (Datos ingresados por el usuario)</li> <li>Calcular el per\u00edmetro de [cuadrado|rect\u00e1ngulo]. (Datos ingresados por el usuario).La salida del mensaje sera: El per\u00edmetro de la figura es 43.59 u</li> <li>Calcular el \u00e1rea de un triangulo (Datos ingresados por el usuario). La salida del mensaje sera: El \u00e1rea del triangulo es 45.23 u^2</li> <li>Calcular el promedio de una materia, son 3 unidades. La salida del mensaje sera: La calificaci\u00f3n es 4.32</li> </ol>"},{"location":"dart/04.entrada_de_datos/#ejercicios","title":"Ejercicios","text":"<ol> <li>Realizar el c\u00e1lculo del per\u00edmetro de un cuadrado, con datos en memoria, e imprimir el resultado</li> <li>Realizar el c\u00e1lculo del per\u00edmetro de un rect\u00e1ngulo, solicitando el lado de la figura al usuario, e imprimir el resultado</li> <li>Realizar el c\u00e1lculo del area de un cuadrado, solicitando el lado de la figura al usuario, e imprimir el resultado</li> <li>Realizar un programa que realice el c\u00e1lculo de Fuerza en la segunda Ley de Newton. La formula es \\(Fuerza = masa * aceleraci\u00f3n\\). Solicitando el lado de la figura al usuario, e imprimir el resultado.</li> <li>Realizar una calculadora que convierta de cent\u00edmetros a pulgadas,  solicitando el lado de la figura al usuario, e imprimir el resultado.</li> <li>Hacer una caja registradora, que reciba el valor del producto y al final entregue el costo total con IVA y sin IVA; es decir, En total es $18.35 y con IVA son $21.28, recordar que el IVA es del 16%.</li> </ol>"},{"location":"dart/05.math/","title":"Librer\u00eda math","text":"<p>Como en la mayor\u00eda de lenguajes cuenta con su librer\u00eda con funciones y constantes matem\u00e1ticas, dart no es la excepci\u00f3n, aqu\u00ed abarcaremos una parte de ella.</p> <p>Primero debemos importar la librer\u00eda para poder hacer uso de sus funciones, eso lo hacemos de la siguiente manera:</p> <pre><code>import 'dart:math';\n</code></pre>"},{"location":"dart/05.math/#constantes","title":"Constantes","text":"<p>De las constantes que mas nos pueden interesar son:</p> <ul> <li>PI</li> <li>Euler (E)</li> </ul> <pre><code>import 'dart:math';\n\nvoid main() {\n  print(\"El valor de pi: $pi\");\n  print(\"El valor de e: $e\");\n}\n</code></pre>"},{"location":"dart/05.math/#metodos","title":"M\u00e9todos","text":"<p>De los m\u00e9todos que nos pueden interesar son:</p> <ul> <li>Identidades trigonom\u00e9tricas (Todo es en radianes)<ul> <li>Seno</li> <li>Coseno</li> <li>Tangente</li> </ul> </li> <li>Ra\u00edz cuadrada</li> <li>Exponente</li> <li>M\u00e1ximo</li> <li>M\u00ednimo</li> </ul> <pre><code>import 'dart:math';\n\nvoid main() {\n\n  double raizCuadrada = sqrt(25);\n  double exponente = exp(2);\n  double coseno = cos(45);\n  double seno = sin(45);\n  double tangente = tan(45);\n\n\n  print(\"La ra\u00edz cuadrada de 25 es: $raizCuadrada\");\n  print(\"El exponencial de e^2 es: $exponente\");\n  print(\"El coseno de 45 es: $coseno\");\n  print(\"El seno de 45 es: $seno\");\n  print(\"La tangente de 45 es: $tangente\");\n}\n</code></pre>"},{"location":"dart/05.math/#random","title":"Random","text":"<p>Otro objeto que viene dentro de la librer\u00eda <code>math</code> es el objeto random, que no sirve para generar u obtener n\u00fameros al azar o randoms.</p> <pre><code>import 'dart:math';\n\nvoid main() {\n  var intValue = Random().nextInt(10); // Value is &gt;= 0 and &lt; 10.\n  var doubleValue = Random().nextDouble(); // Value is &gt;= 0.0 and &lt; 1.0.\n  var boolValue = Random().nextBool(); // true or false, with equal chance.\n\n  print(\"Random entero: $intValue\");\n  print(\"Random double: $doubleValue\");\n  print(\"Random booleano: $boolValue\");\n}\n</code></pre>"},{"location":"dart/05.math/#ejemplos","title":"Ejemplos","text":"<ul> <li>Calcular la potencia de un n\u00famero, solicita al usuario el n\u00famero que desea elevar y despu\u00e9s la base a la cu\u00e1l lo elevara. Ejemplo: \\(2^2 = 4\\); \\(2^3 = 8\\)</li> </ul>"},{"location":"dart/05.math/#ejercicios","title":"Ejercicios","text":"<ul> <li>Resolver ecuaci\u00f3n de segundo orden, aplicando la f\u00f3rmula general; recuerda que no existen las ra\u00edces negativas. Debe entregarte los valores de las ra\u00edces o en caso que alguna o ninguna ra\u00edz exista, indicarlo. Nota: Debes usar las funciones matem\u00e1ticas que vienen en el lenguaje</li> <li>Realizar una calculadora de Teorema de Pit\u00e1goras, el usuario debe elegir, cateto opuesto, adyacente o hipotenusa, salir, que desear calcular. Nota: Debes usar las funciones matem\u00e1ticas que vienen en el lenguaje</li> </ul> <p>Mas informaci\u00f3n en https://api.dart.dev/stable/3.2.4/dart-math/dart-math-library.html \u00ba</p>"},{"location":"dart/06.decisiones/","title":"Estructuras de decisiones","text":"<p>La estructura de decisiones que vamos a estar aprendiendo ser\u00e1n <code>if</code> e <code>if-else</code>. Tenemos <code>switch</code>, sin embargo no se abarcaran aun.</p>"},{"location":"dart/06.decisiones/#estructura-basica-if","title":"Estructura b\u00e1sica <code>if</code>","text":"<p>La sentencia <code>if</code> nos ayuda a dar un control de flujo de la aplicaci\u00f3n, siempre verificando una situaci\u00f3n verdadera. </p> <p></p> <p></p> <pre><code>void main() {\n  int valor1 = 4;\n  int valor2 = 7;\n\n  if (valor1 &lt; valor2) {\n    print(\"$valor1 &lt; $valor2\");\n  }\n  if (valor1 &gt; valor2) {\n    print(\"$valor1 &gt; $valor2\");\n  }\n  if (valor1 &gt;= valor2) {\n    print(\"$valor1 &gt;= $valor2\");\n  }\n  if (valor1 &lt;= valor2) {\n    print(\"$valor1 &lt;= $valor2\");\n  }\n  if (valor1 == valor2) {\n    print(\"$valor1 == $valor2\");\n  }\n  if (valor1 != valor2) {\n    print(\"$valor1 != $valor2\");\n  }\n}\n</code></pre> <p>Siempre que se cumpla una condici\u00f3n, se ingresa al bloque dentro de las llaves y todo el c\u00f3digo escrito ahi, se ejecutara.</p>"},{"location":"dart/06.decisiones/#estructura-if-else","title":"Estructura <code>if-else</code>","text":"<p>La palabra reservada <code>else</code> complementa al <code>if</code>, es en la \u00fanica forma que lo vamos a encontrar. Esto se lee como, <code>si</code> cumple con la condici\u00f3n, act\u00faa el bloque de <code>if</code>, de lo contrario hago lo que esta en el otro bloque.</p> <pre><code>void main() {\n  int valor1 = 4;\n  int valor2 = 7;\n\n  if (valor1 &lt; valor2) {\n    print(\"$valor1 &lt; $valor2\");\n  } else if (valor1 &gt; valor2) {\n    print(\"$valor1 &gt; $valor2\");\n  } else if (valor1 &gt;= valor2) {\n    print(\"$valor1 &gt;= $valor2\");\n  } else if (valor1 &lt;= valor2) {\n    print(\"$valor1 &lt;= $valor2\");\n  } else if (valor1 == valor2) {\n    print(\"$valor1 == $valor2\");\n  } else if (valor1 != valor2) {\n    print(\"$valor1 != $valor2\");\n  }\n}\n</code></pre>"},{"location":"dart/06.decisiones/#operadores-logicos","title":"Operadores l\u00f3gicos","text":""},{"location":"dart/06.decisiones/#ejemplos","title":"Ejemplos","text":"<ul> <li>Preguntar la edad, \"Ya eres mayor de edad\": \"Aun eres muy joven\"</li> <li>Solicitar al usuario la cantidad de mascotas que tiene en casa, si no tiene o cuenta con hasta 3, se le manda el mensaje: \"Te hacen falta m\u00e1s mascotas\", de lo contrario el mensaje sera \"Eres amante de los animales\". (Usando exclusivamente if)</li> <li>Verificar si un numero es \"par\" o \"impar\"</li> <li>Dar 2 n\u00fameros e indicar cual es el menor de los 3</li> <li>Dar 3 n\u00fameros e indicar cual es el menor de los 3</li> <li>Calculadora del rect\u00e1ngulo,<ul> <li>1.- per\u00edmetro</li> <li>2.- area</li> <li>en caso que de otra opci\u00f3n indicar que \"no existe la opci\u00f3n\"</li> </ul> </li> </ul>"},{"location":"dart/06.decisiones/#ejercicios","title":"Ejercicios","text":""},{"location":"dart/06.decisiones/#if-else","title":"If-else","text":"<ul> <li>Hacer una calculadora de \u00e1reas geom\u00e9tricas, las opciones son:<ul> <li>\u00c1rea del cuadrado</li> <li>\u00c1rea del c\u00edrculo</li> <li>\u00c1rea del tri\u00e1ngulo</li> <li>Con opci\u00f3n de salir del programa y al final imprimir el resultado con la frase \"El \u00e1rea de la figura 'nombre' es\"</li> </ul> </li> <li>Ley de ohm, solicitar la variable a calcular, solicitar los datos e imprimir el resultado con su respectiva unidad. La formula es \\(I = \\frac{V}{R}\\)</li> <li>Hacer una caja registradora, que reciba el valor del producto y al final entregue el costo total con IVA y sin IVA; es decir, En total es $18.35 y con IVA son $21.28, recordar que el IVA es del 16%</li> </ul>"},{"location":"dart/06.decisiones/#operadores-logicos_1","title":"Operadores l\u00f3gicos","text":"<ul> <li> <p>Solicitar al usuario su promedio actual, en valor entero, el algoritmo debe tomar la decisi\u00f3n con bas\u00e9 al n\u00famero ingresado, y dar un mensaje (ver la tabla)</p> Rango de calificaci\u00f3n Mensaje a imprimir 0 a menor que 6 \"lastima margarito\" 6 a menor que 7 \"Apl\u00edcate\" 7 a menor que 8 \"Apenitas y la libraste, metele pap\u00ed\" 8 a menor que 9 \"Bastante bien, puedes mejorar\" 9 a menor que 10 \"muy bien amiguito, te ganaste la cheve!\" Igual a 10 \"Excelente, tu muy bien\" Menor a 0 y mayor a 10 \"Calificaci\u00f3n no posible\" </li> <li> <p>C\u00e1lculo de BMI (Indice de Masa Corporal) para peso y altura, indicando cual es tu BMI y en que nivel de obesidad te encuentras (Ver tabla). La formula es \\(BMI = peso (kg) * estatura^2 (cm)\\)</p> IMC Nivel de peso Por debajo de 18.5 Bajo peso 18.5 \u2013 24.9 Normal 25.0 \u2013 29.9 Sobrepeso 30.0 o m\u00e1s Obesidad </li> <li> <p>Mandar la letra del m\u00faltiplo o submultiple correspondiente, es decir, si el usuario ingresa el valor de 1,000, el valor que se debe desplegar por pantalla es la letra \"K\", si el usuario ingresa el valor de 0.02, se debe desplegar por pantalla la letra \"m\"      </p> Unidad Letra Valor pico p \\(\\times 10^{-12}\\) nano n \\(\\times 10^{-9}\\) micro u \\(\\times 10^{-6}\\) mili m \\(\\times 10^{-3}\\) unidad 1 kilo K \\(\\times 10^{3}\\) mega M \\(\\times 10^{6}\\) giga G \\(\\times 10^{9}\\) </li> </ul>"},{"location":"dart/07.loops/","title":"Ciclos","text":"<p>Los ciclos son estructuras de repetici\u00f3n, todo lo que este dentro del bloque del dicha estructura se estar\u00e1 repitiendo hasta que se cumpla alguna condici\u00f3n o puede ser infinito; todo esto depende del funcionamiento que necesitemos realizar dentro de este ciclo.</p>"},{"location":"dart/07.loops/#ciclo-for","title":"Ciclo <code>for</code>","text":"<p>El ciclo <code>for</code> tiene el mismo estilo que en <code>C</code>, <code>Java</code>, etc.</p> <p>Tenemos una variable de inicializaron, una comparaci\u00f3n y acci\u00f3n.</p> <p> </p> <p>En este ejemplo vamos a imprimir 10 veces un mensaje.</p> <pre><code>void main() {\n  //mensaje que se repite en 10 ocasiones\n\n  int limite = 10;\n  for (int i = 0; i &lt; limite; i++) {\n    print(\"mensaje que se muestra en el ciclo\");\n  }\n}\n</code></pre>"},{"location":"dart/07.loops/#ciclo-while","title":"Ciclo <code>while</code>","text":"<p>El ciclo <code>while</code> tiene el mismo estilo que en <code>C</code>, <code>Java</code>, etc.</p> <p>Tenemos una variable de inicializaron, una comparaci\u00f3n y acci\u00f3n.</p> <p> </p> <p>En este ejemplo vamos a imprimir 10 veces un mensaje.</p> <pre><code>void main() {\n  //mensaje que se repite en 10 ocasiones\n\n  int contador = 0;\n  int limite = 10;\n  while (contador &lt; limite) {\n    print(\"mensaje que se muestra en el ciclo\");\n    contador++;\n  }\n}\n</code></pre>"},{"location":"dart/07.loops/#ciclos-infinitos","title":"Ciclos infinitos","text":"<p>Los ciclos infinitos como su nombre lo indica, nunca terminan; es decir, no tiene una comparaci\u00f3n que haga que al ser evaluado indique la condici\u00f3n <code>false</code>, lo que har\u00eda que el ciclo termine. Obviamente existen formas de que terminen de alguna manera, como se vera con <code>break</code>.</p> <p>Formato del ciclo infinito <code>for</code></p> <pre><code>for(;;){\n    //lo que este dentro se repetir\u00e1 de manera infinita\n}\n</code></pre> <p>Formato del ciclo infinito <code>while</code></p> <pre><code>// tambi\u00e9n conocido como while-true\n\nwhile(true){\n    //lo que este dentro se repetir\u00e1 de manera infinita\n}\n</code></pre>"},{"location":"dart/07.loops/#continue-y-break","title":"<code>continue</code> y <code>break</code>","text":"<p>Estas palabras reservadas son especiales, por llamarlas de alguna forma. La aplicaci\u00f3n va en funci\u00f3n nuestras necesidades.</p> <ul> <li><code>continue</code>: Nos sirve para que reinicie el ciclo; es decir, dentro del ciclo lo encuentra, el resto de condigo que este debajo ya no se ejecutara, haciendo que el ciclo vuelva a comenzar.</li> <li><code>break</code>: Lo que hace esta palabra reservada es termina con el ciclo, sin mas. No importa si el ciclo esta comenzando o donde vaya, simplemente se termina. Esta es una de las maneras mas habituales de terminar un ciclo infinito.</li> </ul> <pre><code>void main() {\n  int limite = 10;\n  for (int i = 0; i &lt; limite; i++) {\n    if (i % 2 == 0) {\n      continue; //cuando i sea par, no se har\u00e1 la impresi\u00f3n del mensaje\n    }\n    print(\"$i -&gt; mensaje que se muestra en el ciclo\");\n  }\n}\n</code></pre> <pre><code>void main() {\n  int contador = 0;\n  int limite = 10;\n  while (contador &lt; limite) {\n    print(\"$contador -&gt; mensaje que se muestra en el ciclo\");\n    contador++;\n\n    if (contador == 4) {\n      break;// cuando el contador sea 4, el ciclo termina en ese momento\n    }\n  }\n}\n</code></pre>"},{"location":"dart/07.loops/#ejemplos","title":"Ejemplos","text":"<ul> <li>Imprimir 5 veces la palabra \"Hola\"</li> <li>Imprimir del 0 al 50</li> <li>Hacer una calculadora de 2 n\u00fameros, que tenga la opci\u00f3n de sumar, restar y salir, si da una opci\u00f3n que no esta, volver a mostrar el menu inicial, el usuario solo podr\u00e1 salir si elije la opci\u00f3n de salir. Cada que termina de hacer la operaci\u00f3n de sumar o restar, volver a mostrar el men\u00fa</li> <li>Imprimir la tabla de multiplicar del 3, del 1 al 10</li> </ul>"},{"location":"dart/07.loops/#ejercicios-realizarlo-con-for-y-while","title":"Ejercicios (Realizarlo con <code>for</code> y <code>while</code>)","text":"<ul> <li>Realizar un programa para visualizar la tabla de multiplicar que desee el usuario, el usuario dar\u00e1 el valor para la tabla, tambi\u00e9n debe dar el limite donde comienza hasta donde termina, es decir, por ejemplo si da el numero 5, comenzando desde el 3 hasta el 25, comenzara la tabla 5x3 = 15 ... 5x25=125</li> <li>Leer 10 n\u00fameros enteros, solicitando uno a uno al usuario, e imprimir al final cu\u00e1ntos fueron par y cu\u00e1ntos impar.</li> <li>Calcular el factorial de un n\u00famero entero. Se le solicita al usuario que ingrese un n\u00famero entero el cu\u00e1l quiere calcular el factorial del mismo. Ejemplo: 5! = 120</li> <li>Calcular la potencia de un n\u00famero, solicita al usuario el n\u00famero que desea elevar y despu\u00e9s la base a la cu\u00e1l lo elevara. Ejemplo: 2^2= 4, 2^3=8. No se permite el uso de la librer\u00eda matem\u00e1tica.</li> <li>Leer 10 n\u00fameros, solicitando uno a uno al usuario, y al final se imprime por pantalla el n\u00famero m\u00e1s alto ingresado de los 10.</li> <li>Calculadora de la segunda ley de newton. Sale el men\u00fa indicando que desea calcular y la opci\u00f3n de salir. Despu\u00e9s solicita al usuario los valores que conoce e imprimir el resultado, una vez termina de hacer todas las operaciones, debe regresar al men\u00fa inicial, debe existir una opci\u00f3n para terminal el programa, en caso que coloque una opci\u00f3n no existen, debe volver a mostrar el mensaje.</li> <li>C\u00e1lculo de la media de un conjunto de datos. Se le pregunta al usuario cuantos n\u00fameros son, comienza a pedirlos uno a uno y al final imprime el resultado de la media de todos los datos.</li> <li>C\u00e1lculo de la media de un conjunto de datos positivos. En cada iteraci\u00f3n pregunta al usuario si quiere terminar para conocer el resultado o ingresar otro valor, debe dar el valor de -1 para terminar la solicitud de valores. Cuando elija terminar, imprimir el valor total del promedio o media.</li> <li>Realizar una calculadora de ley de Ohm, al inicio te da el menu para seleccionar que se desea calcular; para terminar el programa se debe dar la opci\u00f3n de salida, si no el programa sigue mostrando el menu inicial, si el usuario ingresa un valor y \"no existe en el menu\", manda mensaje que la opci\u00f3n no existe y vuelve a mostrar el menu. El resultado lo debe lanzar en el mejor formato, es decir, si el resultado es 1,000 ohms, en pantalla debe salir 1k, si es posible agregar el s\u00edmbolo de Omega (\\(\\Omega\\)) para resistencias. Si el resultado es 0.005A en pantalla debe salir 5mA. El usuario puede ingresar el valor a como se esta acostumbrado, es decir, el valor que ingresa es 5mA e internamente se obtenga el valor de 0.05 y se pueda realizar el calculo correspondiente</li> <li> <p>Una pasteler\u00eda nos solicita realizar un programa para una maquina de pastelitos, las opciones son las siguientes</p> <p></p> <ul> <li>Debe ir sumando las opciones que elije que elija el usuario. Pero cada vez que termine de elegir, debe volver a mostrar el men\u00fa, hasta que el usuario elija terminar debe imprimir la cantidad total a pagar. El usuario en cualquier momento puede terminar la orden y la maquina debe darle la cantidad a pagar.</li> <li>Por ejemplo, al inicio muestra el menu de pastel, cupcake y salir. Si elije, pastel, ahora le muestra las opciones de chocolate, vainilla, natural y salir, el usuario elije vainilla, y por ultimo elije chispas, debe preguntar si a\u00f1ade algo mas, si es asi, vuelve a mostrar el menu inicial. En caso que elija que ya termino, debe imprimir la cantidad que debe pagar, es decir, (5+1+0.5) \"Cantidad a pagar $6.5\".</li> <li>Recuerda el usuario puede salir en cualquier momento y debe recibir la cantidad que debe pagar.</li> <li>Debe imprimir en forma de lista todo lo solicitado (tu le puedes dar mas formato o mejor presentaci\u00f3n), ejemplo:<ul> <li>2 Pasteles de chocolate con chistas $15.00</li> <li>1 cupcake de chocolate con chispas $5.50</li> <li>Total a pagar: $20.50</li> </ul> </li> </ul> </li> </ul>"},{"location":"dart/08.declaracion_dinamica/","title":"Otra forma de declarar variables","text":"<p>Pues que <code>dart</code> puede compilar para diversas plataformas y la versatilidad del lenguaje, ademas de que es un lenguaje bastante reciente, pues han tomado lo mejor de otros lenguajes, para que <code>dart</code> lo tenga de manera nativa, o que si vienes de otros lenguajes se te haga mas familiar o f\u00e1cil (eso creo yo). Contamos con unas palabras reservadas con caracter\u00edsticas especiales como son las que veremos a continuaci\u00f3n.</p>"},{"location":"dart/08.declaracion_dinamica/#var","title":"<code>var</code>","text":"<p>La palabra reservada <code>var</code> se usa para declarar una variable, y de manera autom\u00e1tica al momento de darle su valor, esta infiere el tipo de esta variable. Como lo podemos ver el siguiente c\u00f3digo:</p> <pre><code>void main() {\n  var var1 = 3; // al recibir un int, ya sabe el compilador el tipo de dato que maneja\n  var var2 = \"Hola; // al recibir un String, ya sabe el compilador el tipo de dato que maneja\n\n  print(var1);\n  print(var2);\n}\n</code></pre> <p>Cuando no sepamos que tipo de variable u objeto vamos a ocupar podemos usar <code>var</code>; sin embargo, siempre se recomienda escribir el tipo desde un inicio. En ocasiones por comodidad, flexibilidad, rapidez hacemos uso de <code>var</code>. Por ejemplo, es como manejar <code>let</code> en JavaScript.</p>"},{"location":"dart/08.declaracion_dinamica/#dynamic","title":"<code>dynamic</code>","text":"<p>La palabra reservada <code>dynamic</code> se usa cuando no sabemos nada del tipo de variable que se va a contener o cuando queremos que no tenga un tipo definido, en otras palabras es un objeto gen\u00e9rico, pero que en cada momento que se le asigne un valor, se infiere el tipo pero, este puede cambiar cada vez que queramos. No se recomienda en general que se ocupe, pero en ocasiones es como usarlo, pero no se debe abusar de su uso. El uso mas com\u00fan es cuando tenemos respuestas de una API.</p> <pre><code>void main() {\n  dynamic variable = 3;\n  print(variable);\n\n  variable = \"Hola\";\n  print(variable);\n\n  variable = 2.5;\n  print(variable);\n}\n</code></pre>"},{"location":"dart/08.declaracion_dinamica/#const-vs-final","title":"<code>const</code> vs <code>final</code>","text":"<p>En esencia b\u00e1sica ambas palabras hacen lo mismo, pero operan en distinto momento.</p> <p>const</p> <pre><code>**Generara objetos o variables inmutables**\n</code></pre> <p>Una vez se declara una variable <code>const</code> ya no se puede modificar de ninguna manera. Esto lo hacemos cuando no queremos o no necesitamos que se le modifique su valor, esto es conveniente para que el programa sepa la memoria que necesita para dicha variable</p> <p>final</p>"},{"location":"dart/09.iteradores/","title":"Iteradores","text":""},{"location":"dart/09.iteradores/#listas-arrays","title":"Listas (Arrays)","text":""},{"location":"dart/09.iteradores/#sets","title":"Sets","text":""},{"location":"dart/09.iteradores/#mapas","title":"Mapas","text":""},{"location":"dart/10.funciones/","title":"Funciones","text":""},{"location":"dart/11.poo/","title":"Programaci\u00f3n Orientada a Objetos (OOP)","text":""},{"location":"flutter/","title":"Flutter","text":""}]}